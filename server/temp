// utility

function getIds(data) {
  ids = [];
  for (let i = 0; i < data.length; i++) {
    ids.push(data[i]._id);
  }
  return ids;
}

async function appendChild(data, childname, parentId, ownerId, model) {
  let child = await assembleObjectRecursive([data], model, ownerId);
  let parentObj = await model.parent.model.findById(parentId);
  parentObj[childname].push(child);
  await parentObj.save();
  return child;
}

async function assembleObjectRecursive(data, model = User, owner = null) {
  let save = async (data, model) => {
    let finalData = [];
    for (let i = 0; i < data.length; i++) {
      let item = data[i];
      if (owner) item.owner = owner;
      let dataModel = new model(item);
      await dataModel.save();
      finalData.push(dataModel);
    }
    return getIds(finalData);
  };

  if (model.children == null) {
    return await save(data, model);
  }
  let children = model.children;
  console.log(data);
  for (let i = 0; i < data.length; i++) {
    console.log(data[i]);
    for (let j = 0; j < children.length; j++) {
      if (!["object", "mongodb"].includes(typeof data[i])) {
        continue;
      }
      let child = children[j];
      if (!(child.name in data[i])) {
        console.log(child.name);
        console.log(data[i]);
        continue;
      }
      let newdata = data[i][child.name];
      ids = await assembleObjectRecursive(newdata, child.model, owner);
      data[i][child.name] = ids;
    }
  }
  let finalData = await save(data, model);
  return finalData;
}

async function populateRecursive(data, model) {
  if (model.children == null) return;
  let children = model.children;
  for (let i = 0; i < children.length; i++) {
    let child = children[i];
    if (!(child.name in data)) continue;
    let childData = await child.model.findOne({ _id: data[child.name] }).lean();
    if (childData == null) continue;
    data[child.name] = childData;
    await populateRecursive(childData, child.model);
  }
}

// Modified AI endpoint to save message history
// it appears to be faulty, will need to be fixed to use
// app.post("/api/function-call", async (req, res) => {
//   const { input, userId } = req.body;
//   console.log("test");
//   let messages = [
//     {
//       role: "system",
//       content:
//         "You are a helpful assistant that can call a function caller AI model ONLY if user prompts with a command by signaling with a '/' before any potential command.",
//     },
//     {
//       role: "user",
//       content: input,
//     },
//   ];

//   try {
//     // Save user message
//     await Message.create({ userId, content: input, role: "user" });

//     const response = await AI.mothercaller(messages);

//     // Save AI response
//     await Message.create({ userId, content: response, role: "assistant" });

//     res.json({ response });
//   } catch (error) {
//     console.error("Error:", error);
//     res
//       .status(500)
//       .json({ error: "An error occurred while processing your request." });
//   }
// });

// Modified AI endpoint to not require context/message history.
// will need to be modified, system prompt and interaction with frontend, as this
// will be used to generate stats
app.post("/api/function-call/nocontext", express.json(), async (req, res) => {
  const { input } = req.body;
  console.log("test");
  let messages = [
    {
      role: "system",
      content:
        "You are a helpful assistant that can call a function caller AI model ONLY if user prompts with a command by signaling with a '/' before any potential command.",
    },
    {
      role: "user",
      content: input,
    },
  ];
  try {
    const response = await AI.mothercaller(messages);
    res.json({ response });
  } catch (error) {
    console.error("Error:", error);
    res
      .status(500)
      .json({ error: "An error occurred while processing your request." });
  }
});

// New endpoint to delete message history
app.delete("/api/message-history/:userId", async (req, res) => {
  const { userId } = req.params;

  try {
    await Message.deleteMany({ userId });
    res.json({ message: "Message history deleted successfully" });
  } catch (error) {
    console.error("Error deleting message history:", error);
    res
      .status(500)
      .json({ error: "An error occurred while deleting message history." });
  }
});

("You are a helpful assistant that can call a function caller with a given prompt ONLY if the user calls with a '/' to indicate command.");
